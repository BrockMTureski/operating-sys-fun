environment variable before exploit:
SHELL=/bin/bash
SESSION_MANAGER=local/ELEC377Home:@/tmp/.ICE-unix/1634,unix/ELEC377Home:/tmp/.ICE-unix/1634
QT_ACCESSIBILITY=1
COLORTERM=truecolor
XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg
XDG_MENU_PREFIX=gnome-
TERM_PROGRAM_VERSION=1.70.1
GNOME_DESKTOP_SESSION_ID=this-is-deprecated
LANGUAGE=en_CA:en
GNOME_SHELL_SESSION_MODE=ubuntu
SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
XMODIFIERS=@im=ibus
DESKTOP_SESSION=ubuntu
SSH_AGENT_PID=1594
GTK_MODULES=gail:atk-bridge
PWD=/home/student/elec377-Mon-9/lab5
XDG_SESSION_DESKTOP=ubuntu
LOGNAME=student
XDG_SESSION_TYPE=x11
GPG_AGENT_INFO=/run/user/1000/gnupg/S.gpg-agent:0:1
XAUTHORITY=/run/user/1000/gdm/Xauthority
VSCODE_GIT_ASKPASS_NODE=/usr/share/code/code
GJS_DEBUG_TOPICS=JS ERROR;JS LOG
WINDOWPATH=2
HOME=/home/student
USERNAME=student
IM_CONFIG_PHASE=1
LANG=en_CA.UTF-8
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
XDG_CURRENT_DESKTOP=Unity
GIT_ASKPASS=/usr/share/code/resources/app/extensions/git/dist/askpass.sh
INVOCATION_ID=9591564988494606968ff42ba7019c9f
MANAGERPID=1423
CHROME_DESKTOP=code-url-handler.desktop
GJS_DEBUG_OUTPUT=stderr
VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
LESSCLOSE=/usr/bin/lesspipe %s %s
XDG_SESSION_CLASS=user
TERM=xterm-256color
LESSOPEN=| /usr/bin/lesspipe %s
USER=student
VSCODE_GIT_IPC_HANDLE=/run/user/1000/vscode-git-b3c293bdad.sock
DISPLAY=:0
SHLVL=1
QT_IM_MODULE=ibus
XDG_RUNTIME_DIR=/run/user/1000
VSCODE_GIT_ASKPASS_MAIN=/usr/share/code/resources/app/extensions/git/dist/askpass-main.js
JOURNAL_STREAM=8:35285
XDG_DATA_DIRS=/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop
GDK_BACKEND=x11
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
GDMSESSION=ubuntu
ORIGINAL_XDG_CURRENT_DESKTOP=ubuntu:GNOME
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
GIO_LAUNCHED_DESKTOP_FILE_PID=2057
GIO_LAUNCHED_DESKTOP_FILE=/usr/share/applications/code.desktop
TERM_PROGRAM=vscode
_=/usr/bin/printenv


I was unable to get the environment to print its environment variables
as i believe that there was an error in my assembly code due to the fact
that the stackpointer was being overwritten when running my injection 
locally and the rip register was pointing at my shell script during segmentation
fault. upon looking through the debug information when i look at the bytes 
surrounding the address pointed to by the rip pointer the area in the shell
code it is pointing to is the data segment area, more specifically it is pointing
to cmdStr which suggests that the error is within the address manipulation of 
environment variables causing for a segmentation fault as that area of memory is
restricted to this process.

Below is my debug code showing different steps in my testing, with an explanation 
above explaining the pertinence of the ouput.

this gdb register information is from running selfcomp.c with the marker for 'MNOPWXYZ' 
shown in rbp (the hex value is backwards as the stack grows downwards, this shows that
the 8 byte following that will overwrite stackpointer allowing for us to change sp to
beginning of shell script

rbp            0x5a595857504f4e4d  0x5a595857504f4e4d


The next step in this lab is to create the assembly code, as previously mentioned, had some
issues with the assembly code, the output for the assembly code is in exploit.lst, as you can
see the value of newAddr which is the length of code is 91 when proper outputs are 90 or 93.
i believe this code error is what caused me issues in the next part, stopping environment 
variables from printing and not allowing me to complete the lab.


This next part of the section is the injection of the shell code using compromise instead of 
compromise1, when ran we experience a core dump from a segmentation fault, upon debugging the
core we see that the backtrace output outputs this:

#0  0x00007fffffffdb6c in ?? ()
#1  0x0000000100000000 in ?? ()
#2  0x0000000000000000 in ?? ()

this is a good sign to some degree as that first trace shows that the number of nops at the start
of our shellscript is correct as that address is going to be the same as rip and shows that the
machine is accessing the area of memory our shell script is is as that address is between 
the value we overwrote rsp with using the buffer overflow (0x7fffffffdb04) and the 
default rsp value (0x7fffffffdb98). Next we can check our registers to confirm this.

first register of importance to us is going to be the stack pointer:

rsp            0x7fffffffdba8      0x7fffffffdba8

this has changed from the previous default value and is now equal to the
the default value offset by 16 which is correct and shows that the 
return address we gave has been followed and popped off the stack

the next register of importance is rip as this is the instruction that
caused the segmentation fault:

rip            0x7fffffffdb6c      0x7fffffffdb6c

when examining this memory location we see the following:

0x7fffffffdb62: 0x58632d795868732f      0x766e'65'746e697270

with the 6b6c bytebeing the byte '0x65' that i put quotation marks around,
this is the intruction in rip. This byte is the first e in cmdStr.

Although I couldn't complete the lab, I have compiled a list of possible seed 
words in namebank.txt based on items of significance to jacks life as found from 
lab5Media posts.

